<:import macros/html.xml />
<:h1>Basic access authentication</:h1>
<:p>In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent (e.g. a web browser) to provide a user name and password when making a request. In basic HTTP authentication, a request contains a header field of the form , where credentials is the base64 encoding of id and password joined by a single colon (:).</:p>
<:p>It is specified in RFC 7617 from 2015, which obsoletes RFC 2617 from 1999.</:p>
<:p>HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it does not require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, removing the need for handshakes.</:p>
<:p>The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. Therefore, Basic Authentication is typically used in conjunction with HTTPS to provide confidentiality.</:p>
<:p>Because the BA field has to be sent in the header of each HTTP request, the web browser needs to cache credentials for a reasonable period of time to avoid constantly prompting the user for their username and password. Caching policy differs between browsers. Microsoft Internet Explorer by default for 15 min.</:p>
<:p>HTTP does not provide a method for a web server to instruct the client to "log out" the user. However, there are a number of methods to clear cached credentials in certain web browsers. One of them is redirecting the user to a URL on the same domain containing credentials that are intentionally incorrect. However, this behavior is inconsistent between various browsers and browser versions. Microsoft Internet Explorer offers a dedicated JavaScript method to clear cached credentials:</:p>
<:p>When the server wants the user agent to authenticate itself towards the server, the server must respond appropriately to unauthenticated requests.</:p>
<:p>To unauthenticated requests, the server should return a response whose header contains a "HTTP 401 Unauthorized" status and a "WWW-Authenticate" field.</:p>
<:p>The "WWW-Authenticate" field for basic authentication is constructed as following:</:p>
<:p></:p>
<:p>The server may choose to include the "charset" parameter from RFC 7617:</:p>
<:p></:p>
<:p>This parameter indicates that the server expects the client to use UTF-8 for encoding username and password (see below).</:p>
<:p>When the user agent wants to send authentication credentials to the server, it may use the "Authorization" field.</:p>
<:p>The "Authorization" field is constructed as follows:</:p>
<:p>1. The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon.</:p>
<:p>2. The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the "charset" parameter.</:p>
<:p>3. The resulting string is encoded using a variant of Base64.</:p>
<:p>4. The authorization method and a space (e.g. "Basic ") is then prepended to the encoded string.</:p>
<:p>For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as:</:p>
<:p></:p>
<:p>A client may avoid a login prompt when accessing a basic access authentication by prepending  to the hostname in the URL. For example, the following would access the page "index.html" at the web site "www.example.com" with the secure HTTPS protocol and provide the username "Aladdin" and the password "OpenSesame" credentials via basic authorization:</:p>
<:p></:p>
<:p>This has been deprecated by RFC 3986: "Use of the format "user:password" in the userinfo field is deprecated." Some modern browsers therefore no longer support URL encoding of basic access credentials. This prevents passwords from being sent and seen prominently in plain text, and also eliminates confusing URLs like which would query the host example.com, not google.com.</:p>
<:p>- Digest access authentication</:p>
<:p>- HTTP header</:p>
<:p>- TLS-SRP, an alternative if one wants to avoid transmitting a password-equivalent to the server (even encrypted, like with TLS).</:p>