<:import macros/html.xml />
<:h1>HTTP compression</:h1>
<:p>HTTP compression is a capability that can be built into web servers and web clients to improve transfer speed and bandwidth utilization.</:p>
<:p>HTTP data is compressed before it is sent from the server: compliant browsers will announce what methods are supported to the server before downloading the correct format; browsers that do not support compliant compression method will download uncompressed data. The most common compression schemes include gzip and Deflate; however, a full list of available schemes is maintained by the IANA. Additionally, third parties develop new methods and include them in their products, such as the Google Shared Dictionary Compression for HTTP (SDCH) scheme implemented in the Google Chrome browser and used on Google servers.</:p>
<:p>There are two different ways compression can be done in HTTP. At a lower level, a Transfer-Encoding header field may indicate the payload of a HTTP message is compressed. At a higher level, a Content-Encoding header field may indicate that a resource being transferred, cached, or otherwise referenced is compressed. Compression using Content-Encoding is more widely supported than Transfer-Encoding, and some browsers do not advertise support for Transfer-Encoding compression to avoid triggering bugs in servers.</:p>
<:p>In most cases, excluding the SDCH, the negotiation is done in two steps, described in RFC 2616:</:p>
<:p>1. The web client advertises which compression schemes it supports by including a list of tokens in the HTTP request. For "Content-Encoding", the list in a field called "Accept-Encoding"; for "Transfer-Encoding", the field is called "TE".</:p>
<:p>2. If the server supports one or more compression schemes, the outgoing data may be compressed by one or more methods supported by both parties. If this is the case, the server will add a "Content-Encoding" or "Transfer-Encoding" field in the HTTP response with the used schemes, separated by commas.</:p>
<:p>The web server is by no means obligated to use any compression method – this depends on the internal settings of the web server and also may depend on the internal architecture of the website in question.</:p>
<:p>In case of SDCH a dictionary negotiation is also required, which may involve additional steps, like downloading a proper dictionary from the external server.</:p>
<:p>The official list of tokens available to servers and client is maintained by IANA, and it includes:</:p>
<:p>- br – Brotli, a compression algorithm specifically designed for HTTP content encoding, defined in RFC 7932 and implemented in Mozilla Firefox release 44 and Chromium release 50</:p>
<:p>- compress – UNIX "compress" program method (historic; deprecated in most applications and replaced by gzip or deflate)</:p>
<:p>- deflate – compression based on the deflate algorithm (described in RFC 1951), a combination of the LZ77 algorithm and Huffman coding, wrapped inside the zlib data format (RFC 1950);</:p>
<:p>- exi – W3C Efficient XML Interchange</:p>
<:p>- gzip – GNU zip format (described in RFC 1952). Uses the deflate algorithm for compression, but the data format and the checksum algorithm differ from the "deflate" content-encoding. This method is the most broadly supported as of March 2011.</:p>
<:p>- identity – No transformation is used. This is the default value for content coding.</:p>
<:p>- pack200-gzip – Network Transfer Format for Java Archives</:p>
<:p>- zstd – Zstandard compression, defined in RFC 8478</:p>
<:p>In addition to these, a number of unofficial or non-standardized tokens are used in the wild by either servers or clients:</:p>
<:p>- bzip2 – compression based on the free bzip2 format, supported by lighttpd</:p>
<:p>- lzma – compression based on (raw) LZMA is available in Opera 20, and in elinks via a compile-time option</:p>
<:p>- peerdist – Microsoft Peer Content Caching and Retrieval</:p>
<:p>- sdch – Google Shared Dictionary Compression for HTTP, based on VCDIFF (RFC 3284)</:p>
<:p>- xpress - Microsoft compression protocol used by Windows 8 and later for Windows Store application updates. LZ77-based compression optionally using a Huffman encoding.</:p>
<:p>- xz - LZMA2-based content compression, supported by a non-official Firefox patch; and fully implemented in mget since 2013-12-31.</:p>
<:p>- SAP NetWeaver</:p>
<:p>- Microsoft IIS: built-in or using third-party module</:p>
<:p>- Apache HTTP Server, via mod_deflate (despite its name, only supporting gzip)</:p>
<:p>- Hiawatha HTTP server: serves pre-compressed files</:p>
<:p>- Cherokee HTTP server, On the fly gzip and deflate compressions</:p>
<:p>- Oracle iPlanet Web Server</:p>
<:p>- Zeus Web Server</:p>
<:p>- lighttpd, via mod_compress and the newer mod_deflate (1.4.42+)</:p>
<:p>- nginx – built-in</:p>
<:p>- Applications based on Tornado, if "compress_response" is set to True in the application settings (for versions prior to 4.0, set "gzip" to True)</:p>
<:p>- Jetty Server – built-into default static content serving and available via servlet filter configurations</:p>
<:p>- GeoServer</:p>
<:p>- Apache Tomcat</:p>
<:p>- IBM Websphere</:p>
<:p>- AOLserver</:p>
<:p>- Ruby Rack, via the Rack::Deflater middleware</:p>
<:p>- HAProxy</:p>
<:p>- Varnish – built-in. Works also with ESI</:p>
<:p>The compression in HTTP can also be achieved by using the functionality of server-side scripting languages like PHP, or programming languages like Java.</:p>
<:p>A 2009 article by Google engineers Arvind Jain and Jason Glasgow states that more than 99 person-years are wasted daily due to increase in page load time when users do not receive compressed content. This occurs when anti-virus software interferes with connections to force them to be uncompressed, where proxies are used (with overcautious web browsers), where servers are misconfigured, and where browser bugs stop compression being used. Internet Explorer 6, which drops to HTTP 1.0 (without features like compression or pipelining) when behind a proxy – a common configuration in corporate environments – was the mainstream browser most prone to failing back to uncompressed HTTP.</:p>
<:p>Another problem found while deploying HTTP compression on large scale is due to the deflate encoding definition: while HTTP 1.1 defines the deflate encoding as data compressed with deflate (RFC 1951) inside a zlib formatted stream (RFC 1950), Microsoft server and client products historically implemented it as a "raw" deflated stream, making its deployment unreliable. For this reason, some software, including the Apache HTTP Server, only implement gzip encoding.</:p>
<:p>In 2012, a general attack against the use of data compression, called CRIME, was announced. While the CRIME attack could work effectively against a large number of protocols, including but not limited to TLS, and application-layer protocols such as SPDY or HTTP, only exploits against TLS and SPDY were demonstrated and largely mitigated in browsers and servers. The CRIME exploit against HTTP compression has not been mitigated at all, even though the authors of CRIME have warned that this vulnerability might be even more widespread than SPDY and TLS compression combined.</:p>
<:p>In 2013, a new instance of the CRIME attack against HTTP compression, dubbed BREACH, was published. A BREACH attack can extract login tokens, email addresses or other sensitive information from TLS encrypted web traffic in as little as 30 seconds (depending on the number of bytes to be extracted), provided the attacker tricks the victim into visiting a malicious web link. All versions of TLS and SSL are at risk from BREACH regardless of the encryption algorithm or cipher used. Unlike previous instances of CRIME, which can be successfully defended against by turning off TLS compression or SPDY header compression, BREACH exploits HTTP compression which cannot realistically be turned off, as virtually all web servers rely upon it to improve data transmission speeds for users.</:p>
<:p>As of 2016, the TIME attack and the HEIST attack are now public knowledge.</:p>
<:p>- RFC 2616: Hypertext Transfer Protocol – HTTP/1.1</:p>
<:p>- HTTP Content-Coding Values by Internet Assigned Numbers Authority</:p>
<:p>- Compression with lighttpd</:p>
<:p>- Coding Horror: HTTP Compression on IIS 6.0</:p>
<:p>- HTTP Compression: resource page by the founder of VIGOS AG, Constantin Rack</:p>
<:p>- Using HTTP Compression by Martin Brown of Server Watch</:p>
<:p>- Using HTTP Compression in PHP</:p>
<:p>- Dynamic and static HTTP compression with Apache httpd</:p>