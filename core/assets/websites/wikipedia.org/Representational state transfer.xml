<:import macros/html.xml />
<:h1>Representational state transfer</:h1>
<:p>Representational State Transfer (REST) is a software architectural style that defines a set of constraints to be used for creating Web services. Web services that conform to the REST architectural style, called "RESTful" Web services (RWS), provide interoperability between computer systems on the Internet. RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations. Other kinds of Web services, such as SOAP Web services, expose their own arbitrary sets of operations. </:p>
<:p>"Web resources" were first defined on the World Wide Web as documents or files identified by their URLs. However, today they have a much more generic and abstract definition that encompasses every thing or entity that can be identified, named, addressed, or handled, in any way whatsoever, on the Web. In a RESTful Web service, requests made to a resource's URI will elicit a response with a payload formatted in HTML, XML, JSON, or some other format. The response can confirm that some alteration has been made to the stored resource, and the response can provide hypertext links to other related resources or collections of resources. When HTTP is used, as is most common, the operations (HTTP methods) available are GET, HEAD, POST, PUT, PATCH, DELETE, CONNECT, OPTIONS and TRACE.</:p>
<:p>By using a stateless protocol and standard operations, RESTful systems aim for fast performance, reliability, and the ability to grow by reusing components that can be managed and updated without affecting the system as a whole, even while it is running.</:p>
<:p>The term "representational state transfer" was introduced and defined in 2000 by Roy Fielding in his doctoral dissertation. Fielding's dissertation explained the REST principles that were known as the "HTTP object model" beginning in 1994, and were used in designing the HTTP 1.1 and Uniform Resource Identifiers (URI) standards. The term is intended to evoke an image of how a well-designed Web application behaves: it is a network of Web resources (a virtual state-machine) where the user progresses through the application by selecting resource identifiers such as nowikihttp://www.example.com/articles/21/nowiki and resource operations such as GET or POST (application state transitions), resulting in the next resource's representation (the next application state) being transferred to the end user for their use.</:p>
<:p>Roy Fielding defined REST in his 2000 PhD dissertation "Architectural Styles and the Design of Network-based Software Architectures" at UC Irvine. He developed the REST architectural style in parallel with HTTP 1.1 of 1996–1999, based on the existing design of HTTP 1.0 of 1996.</:p>
<:p>In a retrospective look at the development of REST, Fielding said: </:p>
<:p>The constraints of the REST architectural style affect the following architectural properties:</:p>
<:p>- performance in component interactions, which can be the dominant factor in user-perceived performance and network efficiency;</:p>
<:p>- scalability allowing the support of large numbers of components and interactions among components. Roy Fielding describes REST's effect on scalability as follows:</:p>
<:p>- simplicity of a uniform interface;</:p>
<:p>- modifiability of components to meet changing needs (even while the application is running);</:p>
<:p>- visibility of communication between components by service agents;</:p>
<:p>- portability of components by moving program code with the data;</:p>
<:p>- reliability in the resistance to failure at the system level in the presence of failures within components, connectors, or data.</:p>
<:p>Six guiding constraints define a RESTful system. These constraints restrict the ways that the server can process and respond to client requests so that, by operating within these constraints, the system gains desirable non-functional properties, such as performance, scalability, simplicity, modifiability, visibility, portability, and reliability. If a system violates any of the required constraints, it cannot be considered RESTful.</:p>
<:p>The formal REST constraints are as follows:</:p>
<:p>The principle behind the client-server constraints is the separation of concerns. Separating the user interface concerns from the data storage concerns improves the portability of the user interfaces across multiple platforms. It also improves scalability by simplifying the server components. Perhaps most significant to the Web, however, is that the separation allows the components to evolve independently, thus supporting the Internet-scale requirement of multiple organizational domains.</:p>
<:p>The client-server communication is constrained by no client context being stored on the server between requests. Each request from any client contains all the information necessary to service the request, and the session state is held in the client. The session state can be transferred by the server to another service such as a database to maintain a persistent state for a period and allow authentication. The client begins sending requests when it is ready to make the transition to a new state. While one or more requests are outstanding, the client is considered to be "in transition". The representation of each application state contains links that can be used the next time the client chooses to initiate a new state-transition.</:p>
<:p>As on the World Wide Web, clients and intermediaries can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable or not to prevent clients from getting stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client-server interactions, further improving scalability and performance.</:p>
<:p>A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers can improve system scalability by enabling load balancing and by providing shared caches. They can also enforce security policies.</:p>
<:p>Servers can temporarily extend or customize the functionality of a client by transferring executable code: for example, compiled components such as Java applets, or client-side scripts such as JavaScript.</:p>
<:p>The uniform interface constraint is fundamental to the design of any RESTful system. It simplifies and decouples the architecture, which enables each part to evolve independently. The four constraints for this uniform interface are:</:p>
<:p>- Resource identification in requests</:p>
<:p>- Resource manipulation through representations</:p>
<:p>- Self-descriptive messages</:p>
<:p>- Hypermedia as the engine of application state (HATEOAS)</:p>
<:p>Web service APIs that adhere to the REST architectural constraints are called RESTful APIs. HTTP-based RESTful APIs are defined with the following aspects:</:p>
<:p>- a base URI, such as ;</:p>
<:p>- standard HTTP methods (e.g., GET, POST, PUT, PATCH and DELETE);</:p>
<:p>- a media type that defines state transition data elements (e.g., Atom, microformats, application/vnd.collection+json, etc.). The current representation tells the client how to compose requests for transitions to all the next available application states. This could be as simple as a URI or as complex as a Java applet.</:p>
<:p>The following table shows how HTTP methods are typically used in a RESTful API:</:p>
<:p>The GET method is safe, meaning that applying it to a resource does not result in a state change of the resource (read-only semantics). The GET, PUT and DELETE methods are idempotent, meaning that applying them multiple times to a resource result in the same state change of the resource as applying them once, though the response might differ. The GET and POST methods are cacheable, meaning that responses to them are allowed to be stored for future reuse.</:p>
<:p>Unlike SOAP-based Web services, there is no "official" standard for RESTful Web APIs. This is because REST is an architectural style, while SOAP is a protocol. REST is not a standard in itself, but RESTful implementations make use of standards, such as HTTP, URI, JSON, and XML. Many developers also describe their APIs as being RESTful, even though these APIs actually don't fulfill all of the architectural constraints described above (especially the uniform interface constraint).</:p>
<:p>- Atomicity, consistency, isolation, durability (ACID)</:p>
<:p>- Clean URLs</:p>
<:p>- Create, read, update and delete (CRUD)</:p>
<:p>- Domain Application Protocol (DAP)</:p>
<:p>- Microservices</:p>
<:p>- Overview of RESTful API Description Languages</:p>
<:p>- OpenAPI Specification (formerly Swagger) – specification for defining interfaces</:p>
<:p>- OData – Protocol for REST APIs</:p>
<:p>- RAML</:p>
<:p>- RSDL (RESTful Service Description Language)</:p>
<:p>- Resource-oriented architecture (ROA)</:p>
<:p>- Resource-oriented computing (ROC)</:p>
<:p>- Service-oriented architecture (SOA)</:p>
<:p>- Web-oriented architecture (WOA)</:p>