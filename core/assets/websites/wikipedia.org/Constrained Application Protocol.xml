<:import macros/html.xml />
<:h1>Constrained Application Protocol</:h1>
<:p>Constrained Application Protocol (CoAP) is a specialized Internet Application Protocol for constrained devices, as defined in RFC 7252. It enables those constrained devices called "nodes" to communicate with the wider Internet using similar protocols. </:p>
<:p>CoAP is designed for use between devices on the same constrained network (e.g., low-power, lossy networks), between devices and general nodes on the Internet, and between devices on different constrained networks both joined by an internet. CoAP is also being used via other mechanisms, such as SMS on mobile communication networks.</:p>
<:p>CoAP is a service layer protocol that is intended for use in resource-constrained internet devices, such as wireless sensor network nodes. CoAP is designed to easily translate to HTTP for simplified integration with the web, while also meeting specialized requirements such as multicast support, very low overhead, and simplicity. Multicast, low overhead, and simplicity are extremely important for Internet of Things (IoT) and Machine-to-Machine (M2M) devices, which tend to be deeply embedded and have much less memory and power supply than traditional internet devices have. Therefore, efficiency is very important. CoAP can run on most devices that support UDP or a UDP analogue.</:p>
<:p>The Internet Engineering Task Force (IETF) Constrained RESTful Environments Working Group (CoRE) has done the major standardization work for this protocol. In order to make the protocol suitable to IoT and M2M applications, various new functionalities have been added. The core of the protocol is specified in RFC 7252; important extensions are in various stages of the standardization process.</:p>
<:p>The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine-to-machine (M2M) applications such as smart energy and building automation. </:p>
<:p>The CoRE group has designed CoAP with the following features in mind:</:p>
<:p>- Overhead and parsing complexity.</:p>
<:p>- URI and content-type support.</:p>
<:p>- Support for the discovery of resources provided by known CoAP services.</:p>
<:p>- Simple subscription for a resource, and resulting push notifications.</:p>
<:p>- Simple caching based on max-age.</:p>
<:p>The mapping of CoAP with HTTP is also defined, allowing proxies to be built providing access to CoAP resources via HTTP in a uniform way.</:p>
<:p>With the introduction of CoAP, a complete networking stack of open-standard protocols that are suitable for constrained devices and environments becomes available.</:p>
<:p>From the architecture point of view, the CoAP server will be installed on the end node, which could be a sensor. On the other hand, the CoAP client should be installed on the controller, which manages several end nodes.</:p>
<:p>Registration of the meanings behind CoAP Code, Options and Content Type is handled by IANA, shown in </:p>
<:p>The smallest CoAP message is 4 bytes in length, if omitting Token, Options and Payload. CoAP makes use of two message types, requests and responses, using a simple, binary, base header format. The base header may be followed by options in an optimized Type-Length-Value format. CoAP is by default bound to UDP and optionally to DTLS, providing a high level of communications security.</:p>
<:p>Any bytes after the headers in the packet are considered the message body. The length of the message body is implied by the datagram length. When bound to UDP, the entire message MUST fit within a single datagram. When used with 6LoWPAN as defined in RFC 4944, messages SHOULD fit into a single IEEE 802.15.4 frame to minimize fragmentation.</:p>
<:p>- Version (VER) (2 bits): Indicates the CoAP version number.</:p>
<:p>- Type (2 bits): Indicates if this message is of type Confirmable (0), Non-confirmable (1), Acknowledgement (2), or Reset (3)</:p>
<:p>- Token Length (4 bits): Indicates the length of the variable-length Token field, which may be 0-8 bytes in length.</:p>
<:p>- CoAP Request/Response Code (8 bits)</:p>
<:p>The three most significant bits form a number known as the "class", which is analogous to the class of HTTP status codes. The five least significant bits form a code that communicates further detail about the request or response. The entire code is typically communicated in the form  . You can find the latest CoAP request/response codes at , though the below list gives some examples:</:p>
<:p>- Message ID (16 bits): Used to detect message duplication and to match messages of type Acknowledgement/Reset to messages of type Confirmable/Non-confirmable.</:p>
<:p>You can easily extract the information from the fixed header in C via these macros:</:p>
<:p>1. define COAP_HEADER_VERSION(data) ( (0xC0 & data[0])»6 )</:p>
<:p>2. define COAP_HEADER_TYPE(data) ( (0x30 & data[0])»4 )</:p>
<:p>3. define COAP_HEADER_TKL(data) ( (0x0F & data[0])»0 )</:p>
<:p>4. define COAP_HEADER_CLASS(data) ( ((data[1]»5)&0x07) )</:p>
<:p>5. define COAP_HEADER_CODE(data) ( ((data[1]»0)&0x1F) )</:p>
<:p>6. define COAP_HEADER_MID(data) ( (data[2]«8)|(data[3]) )</:p>
<:p>- Squid 3.1.9 with transparent HTTP-CoAP mapping module</:p>
<:p>- jcoap Proxy</:p>
<:p>- Californium cf-proxy</:p>
<:p>- CoAPthon</:p>
<:p>- FreeCoAP</:p>
<:p>In many CoAP application domains it is essential to have the ability to address several CoAP resources as a group, instead of addressing each resource individually </:p>
<:p>(e.g. to turn on all the CoAP-enabled lights in a room with a single CoAP request triggered by toggling the light switch).</:p>
<:p>To address this need, the IETF has developed an optional extension for CoAP in the form of an experimental RFC: Group Communication for CoAP - RFC 7390 </:p>
<:p>This extension relies on IP multicast to deliver the CoAP request to all group members. </:p>
<:p>The use of multicast has certain benefits such as reducing the number of packets needed to deliver the request to the members. </:p>
<:p>However, multicast also has its limitations such as poor reliability and being cache-unfriendly. </:p>
<:p>An alternative method for CoAP group communication that uses unicasts instead of multicasts relies on having an intermediary where the groups are created.</:p>
<:p>Clients send their group requests to the intermediary, which in turn sends individual unicast requests to the group members, collects the replies from them, and sends back an aggregated reply to the client.</:p>
<:p>Although the protocol standard includes provisions for mitigating the threat of DDoS amplification attacks, these provisions are not implemented in practice, resulting in the presence of over 580,000 targets primarily located in China and attacks up to 320Gbps.</:p>
<:p>- Internet of Things</:p>
<:p>- OMA Lightweight M2M</:p>
<:p>- Web of Things</:p>
<:p>- Features and specification summaries and lists of programming language libraries and tools</:p>
<:p>- Interactive web server interoperability tests</:p>
<:p>- RFC 7252 "The Constrained Application Protocol (CoAP)"</:p>