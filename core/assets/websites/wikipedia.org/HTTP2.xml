<:import macros/html.xml />
<:h1>HTTP/2</:h1>
<:p>HTTP/2 (originally named HTTP/2.0) is a major revision of the HTTP network protocol used by the World Wide Web. It was derived from the earlier experimental SPDY protocol, originally developed by Google. HTTP/2 was developed by the Hypertext Transfer Protocol working group httpbis (where means "second") of the Internet Engineering Task Force. HTTP/2 is the first new version of HTTP since HTTP 1.1, which was standardized in RFC 2068 in 1997. The Working Group presented HTTP/2 to IESG for consideration as a Proposed Standard in December 2014, and IESG approved it to publish as Proposed Standard on February 17, 2015. The HTTP/2 specification was published as RFC 7540 in May 2015.</:p>
<:p>The standardization effort was supported by Chrome, Opera, Firefox, Internet Explorer 11, Safari, Amazon Silk, and Edge browsers. Most major browsers had added HTTP/2 support by the end of 2015.</:p>
<:p>According to W3Techs, , 37.5% of the top 10 million websites supported HTTP/2.</:p>
<:p>HTTP/3 is the proposed successor (Internet Draft) to HTTP/2, that builds on it.</:p>
<:p>The working group charter mentions several goals and issues of concern:</:p>
<:p>- Create a negotiation mechanism that allows clients and servers to elect to use HTTP 1.1, 2.0, or potentially other non-HTTP protocols.</:p>
<:p>- Maintain high-level compatibility with HTTP 1.1 (for example with methods, status codes, URIs, and most header fields).</:p>
<:p>- Decrease latency to improve page load speed in web browsers by considering:</:p>
<:p>- data compression of HTTP headers</:p>
<:p>- HTTP/2 Server Push</:p>
<:p>- pipelining of requests</:p>
<:p>- fixing the head-of-line blocking problem in HTTP 1.x</:p>
<:p>- multiplexing multiple requests over a single TCP connection</:p>
<:p>- Support common existing use cases of HTTP, such as desktop web browsers, mobile web browsers, web APIs, web servers at various scales, proxy servers, reverse proxy servers, firewalls, and content delivery networks.</:p>
<:p>The proposed changes do not require any changes to how existing web applications work, but new applications can take advantage of new features for increased speed.</:p>
<:p>HTTP/2 leaves most of HTTP 1.1's high-level syntax, such as methods, status codes, header fields, and URIs, the same. What is new is how the data is framed and transported between the client and the server.</:p>
<:p>Websites that are efficient minimize the number of requests required to render an entire page by minifying (reducing the amount of code and packing smaller pieces of code into bundles, without reducing its ability to function) resources such as images and scripts. However, minification is not necessarily convenient nor efficient and may still require separate HTTP connections to get the page and the minified resources. HTTP/2 allows the server to "push" content, that is, to respond with data for more queries than the client requested. This allows the server to supply data it knows a web browser will need to render a web page, without waiting for the browser to examine the first response, and without the overhead of an additional request cycle.</:p>
<:p>Additional performance improvements in the first draft of HTTP/2 (which was a copy of SPDY) come from multiplexing of requests and responses to avoid some of the head-of-line blocking problem in HTTP 1 (even when HTTP pipelining is used), header compression, and prioritization of requests. However, as HTTP/2 runs on top of a single TCP connection there is still potential for head-of-line blocking to occur if TCP packets are lost or delayed in transmission.</:p>
<:p>HTTP/2 no longer supports HTTP 1.1's chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming.</:p>
<:p>SPDY (pronounced like "speedy") was a previous HTTP-replacement protocol developed by a research project spearheaded by Google. Primarily focused on reducing latency, SPDY uses the same TCP pipe but different protocols to accomplish this reduction. The basic changes made to HTTP 1.1 to create SPDY included: "true request pipelining without FIFO restrictions, message framing mechanism to simplify client and server development, mandatory compression (including headers), priority scheduling, and even bi-directional communication".</:p>
<:p>The httpbis working group considered Google's SPDY protocol, Microsoft's HTTP Speed+Mobility proposal (SPDY based), and Network-Friendly HTTP Upgrade. In July 2012, Facebook provided feedback on each of the proposals and recommended HTTP/2 be based on SPDY. The initial draft of HTTP/2 was published in November 2012 and was based on a straight copy of SPDY.</:p>
<:p>The biggest difference between HTTP/1.1 and SPDY was that each user action in SPDY is given a "stream ID", meaning there is a single TCP channel connecting the user to the server. SPDY split requests into either control or data, using a "simple to parse binary protocol with two types of frames". SPDY showed evident improvement over HTTP, with a new page load speedup ranging from 11.81% to 47.7%.</:p>
<:p>The development of HTTP/2 used SPDY as a jumping-off point. Among the many detailed differences between the protocols, the most notable is that HTTP/2 uses a fixed Huffman code-based header compression algorithm, instead of SPDY's dynamic stream-based compression. This helps to reduce the potential for compression oracle attacks on the protocol, such as the CRIME attack.</:p>
<:p>On February 9, 2015, Google announced plans to remove support for SPDY in Chrome in favor of support for HTTP/2. That took effect, starting with Chrome 51.</:p>
<:p>HTTP/2 is defined both for HTTP URIs (i.e. without encryption) and for HTTPS URIs (over TLS using ALPN extension where TLS 1.2 or newer is required).</:p>
<:p>Although the standard itself does not require usage of encryption,ref name="HTTP/2 Frequently Asked Questions"/ref all major client implementations (Firefox, Chrome, Safari, Opera, IE, Edge) have stated that they will only support HTTP/2 over TLS, which makes encryption de facto mandatory.</:p>
<:p>HTTP/2's development process and the protocol itself have faced criticism.</:p>
<:p>The FreeBSD and Varnish developer Poul-Henning Kamp asserts that the standard was prepared on an unrealistically short schedule, ruling out any basis for the new HTTP/2 other than the SPDY protocol and resulting in other missed opportunities for improvement. Kamp criticizes the protocol itself for being inconsistent and having needless, overwhelming complexity. He also states that the protocol violates the protocol layering principle, for example by duplicating flow control that belongs in the transport layer (TCP). Most concerns, however, have been related to encryption issues.</:p>
<:p>Initially, some members of the Working Group tried to introduce an encryption requirement in the protocol. This faced criticism.</:p>
<:p>Critics stated that encryption has non-negligible computing costs and that many HTTP applications have actually no need for encryption and their providers have no desire to spend additional resources on it. Encryption proponents have stated that this encryption overhead is negligible in practice. Poul-Henning Kamp has criticised IETF for following a particular political agenda with HTTP/2. The criticism of the agenda of mandatory encryption within the existing certificate framework is not new, nor is it unique to members of the open-source community a Cisco employee stated in 2013 that the present certificate model is not compatible with small devices like routers, because the present model requires not only annual enrollment and remission of non-trivial fees for each certificate, but must be continually repeated on an annual basis. Working Group finally did not reach consensus over the mandatory encryption, although most client implementations require it, which makes encryption a "de facto" requirement.</:p>
<:p>The HTTP/2 protocol also faced criticism for not supporting opportunistic encryption, a measure against passive monitoring similar to the STARTTLS mechanism that has long been available in other Internet protocols like SMTP. Critics have stated that the HTTP/2 proposal goes in violation of IETF's own RFC7258 "Pervasive Monitoring Is an Attack", which also has a status of Best Current Practice 188. RFC7258/BCP188 mandates that passive monitoring be considered as an attack, and protocols designed by IETF should take steps to protect against passive monitoring (for example, through the use of opportunistic encryption). A number of specifications for opportunistic encryption of HTTP/2 have been provided, of which draft-nottingham-http2-encryption was adopted as an official work item of the working group, leading to the publication of RFC 8164 in May 2017.</:p>
<:p>- Apache 2.4.12 supports HTTP/2 via the module mod_h2, although appropriate patches must be applied to the source code of the server in order for it to support that module. As of Apache 2.4.17 all patches are included in the main Apache source tree, although the module itself was renamed mod_http2. Old versions of SPDY were supported via the module mod_spdy, however the development of the mod_spdy module has stopped.</:p>
<:p>- Apache Tomcat supports HTTP/2 with version 8.5 and newer with a configuration change.</:p>
<:p>- Apache Traffic Server supports HTTP/2.</:p>
<:p>- Caddy supports HTTP/2.</:p>
<:p>- Citrix NetScaler 11.x supports HTTP/2.</:p>
<:p>- Sucuri Supports HTTP/2.</:p>
<:p>- F5 BIG-IP Local Traffic Manager 11.6 supports HTTP/2.</:p>
<:p>- h2o was built from the ground up for HTTP/2 support.</:p>
<:p>- HAProxy 1.8 supports HTTP/2.</:p>
<:p>- Jetty 9.3 supports HTTP/2.</:p>
<:p>- LiteSpeed Web Server 5.0 supports HTTP/2.</:p>
<:p>- Microsoft IIS supports HTTP/2 in Windows 10 and Windows Server 2016.</:p>
<:p>- Netty 4.1 supports HTTP/2.</:p>
<:p>- nginx 1.9.5 supports HTTP/2, released on September 22, 2015, using module ngx_http_v2_module and HTTP/2 Server Push since version 1.13.9 in February 20, 2018.</:p>
<:p>- Node.js Stable support since 8.13.0. (5.0 supports HTTP/2 with a module and Node 8.4 introduced experimental built-in support for HTTP/2.)</:p>
<:p>- .NET Core 2.2.0-preview 1 adds support for HTTP/2.</:p>
<:p>- OpenLiteSpeed 1.3.11 and 1.4.8 supports HTTP/2.</:p>
<:p>- Proxygen supports HTTP/2.</:p>
<:p>- Pulse Secure Virtual Traffic Manager 10.2 supports HTTP/2.</:p>
<:p>- Radware Alteon NG supports HTTP/2.</:p>
<:p>- ShimmerCat supports HTTP/2.</:p>
<:p>- Vert.x 3.3 supports HTTP/2.</:p>
<:p>- Warp (Haskell web server, used by default in Yesod) supports HTTP/2.</:p>
<:p>- Wildfly 9 supports HTTP/2.</:p>
<:p>- Akamai is the first major CDN to support HTTP/2 and HTTP/2 Server Push. http2.akamai.com showcases Akamai's HTTP/2 implementation, including Server Push.</:p>
<:p>- Microsoft Azure supports HTTP/2.</:p>
<:p>- CDN77 supports HTTP/2 using nginx . http2demo.io is a demonstration of CDN77's HTTP/2 implementation.</:p>
<:p>- Cloudflare supports HTTP/2 using nginx with SPDY as a fallback for browsers without support, whilst maintaining all security and performance services. Cloudflare was the first major CDN to support HTTP/2 Server Push.</:p>
<:p>- AWS CloudFront supports HTTP/2 since September 7, 2016.</:p>
<:p>- Fastly supports HTTP/2 including Server Push.</:p>
<:p>- Imperva Incapsula CDN supports HTTP/2. http2.incapsula.com showcases Incapsula's HTTP/2 implementation. The implementation includes support for WAF and DDoS mitigation features as well.</:p>
<:p>- KeyCDN supports HTTP/2 using nginx (October 6, 2015). HTTP/2 Test is a test page to verify if your server supports HTTP/2.</:p>
<:p>- Voxility supports HTTP/2 using nginx since July, 2016. The implementation comes in support for Cloud DDoS mitigation services.</:p>
<:p>- lighttpd has no support for SPDY and HTTP/2 might come in version 1.5.</:p>
<:p>- Other implementations are collected on the GitHub HTTP/2 wiki.</:p>
<:p>- gRPC</:p>
<:p>- HTTP pipelining</:p>
<:p>- QUIC</:p>
<:p>- SPDY</:p>
<:p>- HTTP/3</:p>
<:p>- WebSocket</:p>
<:p>- RFC 7540 – Hypertext Transfer Protocol version 2 (HTTP/2)</:p>
<:p>- RFC 7541 – HPACK: Header Compression for HTTP/2</:p>
<:p>- SPDY Protocol (draft-mbelshe-httpbis-spdy-00)</:p>
<:p>- HTTP Speed+Mobility (draft-montenegro-httpbis-speed-mobility-01)</:p>
<:p>- Proposal for a Network-Friendly HTTP Upgrade (draft-tarreau-httpbis-network-friendly-00)</:p>
<:p>- HTTP/2 Website Online Tester</:p>