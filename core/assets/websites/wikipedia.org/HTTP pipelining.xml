<:import macros/html.xml />
<:h1>HTTP pipelining</:h1>
<:p>HTTP pipelining is a technique in which multiple HTTP requests are sent on a single TCP (transmission control protocol) connection without waiting for the corresponding responses. </:p>
<:p>The technique was superseded by multiplexing via HTTP/2, which is supported by most modern browsers.</:p>
<:p>As of 2018, HTTP pipelining is not enabled by default in modern browsers, due to several issues including buggy proxy servers and HOL blocking.</:p>
<:p>The pipelining of requests results in a dramatic improvement in the loading times of HTML pages, especially over high latency connections such as satellite Internet connections. The speedup is less apparent on broadband connections, as the limitation of HTTP 1.1 still applies: the server must send its responses in the same order that the requests were receivedâ€”so the entire connection remains first-in-first-out and HOL blocking can occur. The asynchronous operation of HTTP/2 and SPDY are solutions for this. Browsers ultimately did not enable pipelining by default, and by 2017 most browsers supported HTTP/2 by default which used multiplexing instead.</:p>
<:p>Non-idempotent requests, like those using POST, should not be pipelined. Sequences of GET and HEAD requests can always be pipelined. A sequence of other idempotent requests like PUT and DELETE can be pipelined or not depending on whether requests in the sequence depend on the effect of others.</:p>
<:p>HTTP pipelining requires both the client and the server to support it. HTTP/1.1 conforming servers are required to support pipelining. This does not mean that servers are required to pipeline responses, but that they are required not to fail if a client chooses to pipeline requests.</:p>
<:p>Pipelining was introduced in HTTP/1.1 and was not present in HTTP/1.0.</:p>
<:p>Implementing pipelining in web servers is a relatively simple matter of making sure that network buffers are not discarded between requests. For that reason, most modern web servers handle pipelining without any problem.</:p>
<:p>Of all the major browsers, only Opera based on Presto layout engine had a fully working implementation that was enabled by default. In all other browsers HTTP pipelining is disabled or not implemented.</:p>
<:p>- Internet Explorer 8 does not pipeline requests, due to concerns regarding buggy proxies and head-of-line blocking.</:p>
<:p>- Internet Explorer 11 does not support pipelining.</:p>
<:p>- Mozilla browsers (such as Mozilla Firefox, SeaMonkey and Camino) support pipelining; however, it is disabled by default. Pipelining is disabled by default to avoid issues with misbehaving servers. When pipelining is enabled, Mozilla browsers use some heuristics, especially to turn pipelining off for older IIS servers. Support for H1 Pipeline was removed from Mozilla Firefox in Version 54.</:p>
<:p>- Konqueror 2.0 supports pipelining, but disabled by default.</:p>
<:p>- Google Chrome previously supported pipelining, but it has been disabled due to bugs and problems with poorly behaving servers.</:p>
<:p>- Pale Moon (web browser) supports pipelining, and is enabled by default</:p>
<:p>Most HTTP proxies do not pipeline outgoing requests.</:p>
<:p>Some versions of the Squid web proxy will pipeline up to two outgoing requests. This functionality has been disabled by default and needs to be manually enabled for "bandwidth management and access logging reasons." Squid supports multiple requests from clients.</:p>
<:p>The Polipo proxy pipelines outgoing requests.</:p>
<:p>Tempesta FW, an open source application delivery controller, also pipelines requests to backend servers.</:p>
<:p>The libwww library made by the World Wide Web Consortium (W3C), supports pipelining since version 5.1 released at 18 February 1997.</:p>
<:p>Other application development libraries that support HTTP pipelining include:</:p>
<:p>- Perl modules providing client support for HTTP pipelining are HTTP::Async and the LWPng (libwww-perl New Generation) library.</:p>
<:p>- Apache Foundation project HttpComponents provides pipelining support in the HttpCore NIO extensions.</:p>
<:p>- The Microsoft .NET Framework 3.5 supports HTTP pipelining in the module .</:p>
<:p>- Qt class , introduced in 4.4.</:p>
<:p>Some other applications currently exploiting pipelining are:</:p>
<:p>- IceBreak application server since BUILD389</:p>
<:p>- phttpget from FreeBSD (a minimalist pipelined HTTP client)</:p>
<:p>- libcurl has limited support for pipelining using the CURLMOPT_PIPELINING option.</:p>
<:p>- portsnap (a FreeBSD ports tree distribution system)</:p>
<:p>- Advanced Packaging Tool (APT) support pipelining.</:p>
<:p>- Subversion (SVN) has optional support for HTTP pipelining with the serf WebDAV access module (the default module, neon does not have pipelining support).</:p>
<:p>- Microsoft Message Queuing on Windows Server 2003 utilises pipelining on HTTP by default, and can be configured to use it on HTTPS.</:p>
<:p>- IBM CICS 3.1 supports HTTP pipelining within its client.</:p>
<:p>Multipart XHR is implementation of pipelining (without any browser or web server support) done purely in JavaScript in combination with server-side scripting.</:p>
<:p>Testing tools which support HTTP pipelining include:</:p>
<:p>- httperf</:p>
<:p>- HTTP persistent connection</:p>
<:p>- WebSocket</:p>
<:p>- SPDY</:p>
<:p>- RFC 7230</:p>
<:p>- HTTP/1.1 Pipelining FAQ at mozilla.org</:p>
<:p>- "Network Performance Effects of HTTP/1.1, CSS1, and PNG" at w3.org</:p>
<:p>- "Optimizing Page Load Times" article</:p>
<:p>- phttpget</:p>
<:p>- serf C library</:p>