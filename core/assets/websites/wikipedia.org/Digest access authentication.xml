<:import macros/html.xml />
<:h1>Digest access authentication</:h1>
<:p>Digest access authentication is one of the agreed-upon methods a web server can use to negotiate credentials, such as username or password, with a user's web browser. This can be used to confirm the identity of a user before sending sensitive information, such as online banking transaction history. It applies a hash function to the username and password before sending them over the network. In contrast, basic access authentication uses the easily reversible Base64 encoding instead of encryption, making it non-secure unless used in conjunction with TLS.</:p>
<:p>Technically, digest authentication is an application of MD5 cryptographic hashing with usage of nonce values to prevent replay attacks. It uses the HTTP protocol.</:p>
<:p>Digest access authentication was originally specified by RFC 2069 ("An Extension to HTTP: Digest Access Authentication"). RFC 2069 specifies roughly a traditional digest authentication scheme with security maintained by a server-generated "nonce value". The authentication response is formed as follows (where HA1 and HA2 are names of string variables):</:p>
<:p>HA1 = MD5(username:realm:password)</:p>
<:p>HA2 = MD5(method:digestURI)</:p>
<:p>response = MD5(HA1:nonce:HA2)</:p>
<:p>A MD5 hash is a 16-byte value. The HA1 and HA2 values used in the computation of the response are the hexadecimal representation (in lowercase) of the MD5 hashes respectively.</:p>
<:p>RFC 2069 was later replaced by RFC 2617 ("HTTP Authentication: Basic and Digest Access Authentication"). RFC 2617 introduced a number of optional security enhancements to digest authentication; "quality of protection" (qop), nonce counter incremented by client, and a client-generated random nonce. These enhancements are designed to protect against, for example, chosen-plaintext attack cryptanalysis.</:p>
<:p>If the algorithm directive's value is "MD5" or unspecified, then HA1 is</:p>
<:p>HA1 = MD5(username:realm:password)</:p>
<:p>If the algorithm directive's value is "MD5-sess", then HA1 is</:p>
<:p>HA1 = MD5(MD5(username:realm:password):nonce:cnonce)</:p>
<:p>If the qop directive's value is "auth" or is unspecified, then HA2 is</:p>
<:p>HA2 = MD5(method:digestURI)</:p>
<:p>If the qop directive's value is "auth-int", then HA2 is</:p>
<:p>HA2 = MD5(method:digestURI:MD5(entityBody))</:p>
<:p>If the qop directive's value is "auth" or "auth-int", then compute the response as follows:</:p>
<:p>response = MD5(HA1:nonce:nonceCount:cnonce:qop:HA2)</:p>
<:p>If the qop directive is unspecified, then compute the response as follows:</:p>
<:p>response = MD5(HA1:nonce:HA2)</:p>
<:p>The above shows that when qop is not specified, the simpler RFC 2069 standard is followed.</:p>
<:p>The MD5 calculations used in HTTP digest authentication is intended to be "one way", meaning that it should be difficult to determine the original input when only the output is known. If the password itself is too simple, however, then it may be possible to test all possible inputs and find a matching output (a brute-force attack) – perhaps aided by a dictionary or suitable look-up list, which for MD5 is readily available.</:p>
<:p>The HTTP scheme was designed by Phillip Hallam-Baker at CERN in 1993 and does not incorporate subsequent improvements in authentication systems, such as the development of keyed-hash message authentication code (HMAC). Although the cryptographic construction that is used is based on the MD5 hash function, collision attacks were in 2004 generally believed to not affect applications where the plaintext (i.e. password) is not known. However, claims in 2006 cause some doubt over other MD5 applications as well. So far, however, MD5 collision attacks have not been shown to pose a threat to digest authentication, and the RFC 2617 allows servers to implement mechanisms to detect some collision and replay attacks.</:p>
<:p>HTTP digest authentication is designed to be more secure than traditional digest authentication schemes, for example "significantly stronger than (e.g.) CRAM-MD5 ..." (RFC 2617).</:p>
<:p>Some of the security strengths of HTTP digest authentication are:</:p>
<:p>- The password is not sent clear to the server.</:p>
<:p>- The password is not used directly in the digest, but rather HA1 = MD5(username:realm:password). This allows some implementations (e.g. JBoss) to store HA1 rather than the cleartext password</:p>
<:p>- Client nonce was introduced in RFC 2617, which allows the client to prevent chosen-plaintext attacks, such as rainbow tables that could otherwise threaten digest authentication schemes</:p>
<:p>- Server nonce is allowed to contain timestamps. Therefore, the server may inspect nonce attributes submitted by clients, to prevent replay attacks</:p>
<:p>- Server is also allowed to maintain a list of recently issued or used server nonce values to prevent reuse</:p>
<:p>Digest access authentication is intended as a security trade-off. It is intended to replace unencrypted HTTP basic access authentication. It is not, however, intended to replace strong authentication protocols, such as public-key or Kerberos authentication.</:p>
<:p>In terms of security, there are several drawbacks with digest access authentication:</:p>
<:p>- Many of the security options in RFC 2617 are optional. If quality-of-protection (qop) is not specified by the server, the client will operate in a security-reduced legacy RFC 2069 mode</:p>
<:p>- Digest access authentication is vulnerable to a man-in-the-middle (MITM) attack. For example, a MITM attacker could tell clients to use basic access authentication or legacy RFC2069 digest access authentication mode. To extend this further, digest access authentication provides no mechanism for clients to verify the server's identity</:p>
<:p>- Some servers require passwords to be stored using reversible encryption. However, it is possible to instead store the digested value of the username, realm, and password</:p>
<:p>- It prevents the use of a strong password hash (such as bcrypt) when storing passwords (since either the password, or the digested username, realm and password must be recoverable)</:p>
<:p>Also, since the MD5 algorithm is not allowed in FIPS, HTTP Digest authentication will not work with FIPS-certified crypto modules.</:p>
<:p>Some strong authentication protocols for web-based applications include:</:p>
<:p>- Public key authentication (usually implemented with a HTTPS / SSL client certificate) using a client certificate.</:p>
<:p>- Kerberos or SPNEGO authentication, employed for example by Microsoft IIS running configured for Integrated Windows Authentication (IWA)</:p>
<:p>- Secure Remote Password protocol (preferably within the HTTPS / TLS layer). However, this is not implemented by any mainstream browsers.</:p>
<:p>- JSON Web Token (JWT) is a JSON-based standard RFC 7519 for creating access tokens that assert some number of claims.</:p>
<:p>By far the most common approach is to use a HTTP+HTML form-based authentication cleartext protocol, or more rarely Basic access authentication. JWT has gained attention in web services.</:p>
<:p>These weak cleartext protocols used together with HTTPS network encryption resolve many of the threats that digest access authentication is designed to prevent.</:p>
<:p>However, this use of HTTPS relies upon the end user to accurately validate that they are accessing the correct URL each time to prevent sending their password to an untrusted server, which results in phishing attacks.</:p>
<:p>Users often fail to do this, which is why phishing has become the most common form of security breach.</:p>
<:p>The following example was originally given in RFC 2617 and is expanded here to show the full text expected for each request and response. Note that only the "auth" (authentication) quality of protection code is covered – , only the Opera and Konqueror web browsers are known to support "auth-int" (authentication with integrity protection). Although the specification mentions HTTP version 1.1, the scheme can be successfully added to a version 1.0 server, as shown here.</:p>
<:p>This typical transaction consists of the following steps:</:p>
<:p>1. The client asks for a page that requires authentication but does not provide a username and password. Typically this is because the user simply entered the address or followed a link to the page.</:p>
<:p>2. The server responds with the 401 "Unauthorized" response code, providing the authentication realm and a randomly generated, single-use value called a "nonce".</:p>
<:p>3. At this point, the browser will present the authentication realm (typically a description of the computer or system being accessed) to the user and prompt for a username and password. The user may decide to cancel at this point.</:p>
<:p>4. Once a username and password have been supplied, the client re-sends the same request but adds an authentication header that includes the response code.</:p>
<:p>5. In this example, the server accepts the authentication and the page is returned. If the username is invalid and/or the password is incorrect, the server might return the "401" response code and the client would prompt the user again.</:p>
<:p>- Client request (no authentication):</:p>
<:p>(followed by a new line, in the form of a carriage return followed by a line feed).</:p>
<:p>- Server response:</:p>
<:p>- Client request (username "Mufasa", password "Circle Of Life"):</:p>
<:p>(followed by a blank line, as before).</:p>
<:p>- Server response:</:p>
<:p>(followed by a blank line and HTML text of the restricted page).</:p>
<:p>The "response" value is calculated in three steps, as follows. Where values are combined, they are delimited by colons.</:p>
<:p>1. The MD5 hash of the combined username, authentication realm and password is calculated. The result is referred to as HA1.</:p>
<:p>2. The MD5 hash of the combined method and digest URI is calculated, e.g. of  and . The result is referred to as HA2.</:p>
<:p>3. The MD5 hash of the combined HA1 result, server nonce (nonce), request counter (nc), client nonce (cnonce), quality of protection code (qop) and HA2 result is calculated. The result is the "response" value provided by the client.</:p>
<:p>Since the server has the same information as the client, the response can be checked by performing the same calculation. In the example given above the result is formed as follows, where  represents a function used to calculate an MD5 hash, backslashes represent a continuation and the quotes shown are not used in the calculation.</:p>
<:p>Completing the example given in RFC 2617 gives the following results for each step.</:p>
<:p>At this point the client may make another request, reusing the server nonce value (the server only issues a new nonce for each "401" response) but providing a new client nonce (cnonce). For subsequent requests, the hexadecimal request counter (nc) must be greater than the last value it used – otherwise an attacker could simply "replay" an old request with the same credentials. It is up to the server to ensure that the counter increases for each of the nonce values that it has issued, rejecting any bad requests appropriately. Obviously changing the method, URI and/or counter value will result in a different response value.</:p>
<:p>The server should remember nonce values that it has recently generated. It may also remember when each nonce value was issued, expiring them after a certain amount of time. If an expired value is used, the server should respond with the "401" status code and add  to the authentication header, indicating that the client should re-send with the new nonce provided, without prompting the user for another username and password.</:p>
<:p>The server does not need to keep any expired nonce values – it can simply assume that any unrecognised values have expired. It is also possible for the server to only allow each nonce value to be returned once, although this forces the client to repeat every request. Note that expiring a server nonce immediately will not work, as the client would never get a chance to use it.</:p>
<:p>.htdigest is a flat-file used to store usernames, realm and passwords for digest authentication of Apache HTTP Server. The name of the file is given in the .htaccess configuration, and can be anything, but ".htdigest" is the canonical name. The file name starts with a dot, because most Unix-like operating systems consider any file that begins with dot to be hidden. This file is often maintained with the shell command "htdigest" which can add, and update users, and will properly encode the password for use.</:p>
<:p>The "htdigest" command is found in the apache2-utils package on dpkg package management systems and the httpd-tools package on RPM package management systems.</:p>
<:p>The syntax of the htdigest command:</:p>
<:p>The format of the .htdigest file:</:p>
<:p>Session Initiation Protocol (SIP) uses basically the same digest authentication algorithm. It is specified by RFC 3261.</:p>
<:p>Most browsers have substantially implemented the spec, some barring certain features such as auth-int checking or the MD5-sess algorithm. If the server requires that these optional features be handled, clients may not be able to authenticate (though note mod_auth_digest for Apache does not fully implement RFC 2617 either).</:p>
<:p>- Amaya</:p>
<:p>- Gecko-based: (not including auth-int)</:p>
<:p>- Mozilla Application Suite</:p>
<:p>- Mozilla Firefox</:p>
<:p>- Netscape 7+</:p>
<:p>- iCab 3.0.3+</:p>
<:p>- KHTML- and WebKit-based: (not including auth-int)</:p>
<:p>- iCab 4</:p>
<:p>- Konqueror</:p>
<:p>- Google Chrome</:p>
<:p>- Safari</:p>
<:p>- Tasman-based:</:p>
<:p>- Internet Explorer for Mac</:p>
<:p>- Trident-based:</:p>
<:p>- Internet Explorer 5+ (not including auth-int)</:p>
<:p>- Presto-based:</:p>
<:p>- Opera</:p>
<:p>- Opera Mobile</:p>
<:p>- Opera Mini</:p>
<:p>- Nintendo DS Browser</:p>
<:p>- Nokia 770 Browser</:p>
<:p>- Sony Mylo 1's Browser</:p>
<:p>- Wii Internet Channel Browser</:p>
<:p>- AKA (security)</:p>
<:p>- JSON Web Token (JWT)</:p>
<:p>- Basic access authentication</:p>
<:p>- RFC 2617</:p>
<:p>- RFC 2069 (obsolete)</:p>