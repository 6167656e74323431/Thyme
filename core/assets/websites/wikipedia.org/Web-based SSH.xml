<:import macros/html.xml />
<:h1>Web-based SSH</:h1>
<:p>Web-based SSH makes it possible to access Secure Shell (SSH) servers through standard web browsers. Respective clients are typically based on JavaScript/Ajax or JavaScript/WebSockets, and, if they work together with an Ajax/WebSocket-to-SSH proxy, can be used to access SSH servers from behind a firewall or proxy that allows HTTP traffic but does not allow SSH traffic.</:p>
<:p>Web-based SSH clients basically consist of the following parts:</:p>
<:p>- "Client-side": Typically JavaScript and dynamic HTML pages are used to capture keystrokes, transmit messages to/from the server and display the results in the user's web browser.</:p>
<:p>- "Server-side/Web application": Incoming requests are processed on the web application server. Keyboard events are forwarded to a secure shell client communicating with the connected SSH server. Terminal output is either passed to the client where it is converted into HTML via JavaScript or it is translated into HTML by the server before it is transmitted to the client.</:p>
<:p>Web-based SSH servers that utilize client-side terminal emulation typically transmit the raw terminal output from the SSH server directly to the client. This has the advantage of offloading the process of translating terminal output into HTML on to the client. The disadvantage of this method is that it is limited by the capabilities of JavaScript and it will use up a non-trivial amount of the client's CPU and memory to process the incoming character stream. It also relies on the client to keep track of the terminal state and respond to escape sequences.</:p>
<:p>Client-side terminal emulator example: vt100.js</:p>
<:p>Web-based SSH servers that utilize server-side terminal emulation typically keep track of the terminal screen and state in memory and convert it to HTML either when a screen update occurs or when the client expressly requests an update. The advantage of this method is that the state of the terminal remains persistent even if the user connects to their existing session(s) from a different web browser. It also enables the server to act upon terminal output even if the user is disconnected. The disadvantage of this method is that it uses up more CPU and memory on the server.</:p>
<:p>Server-side terminal emulator example: terminal.py</:p>
<:p>The main advantages of web-based SSH can be summarized as follows:</:p>
<:p>- "Accessibility": Web-based SSH as described in this article requires no local installation of client software. It is thus possible to access SSH servers through a web browser from anywhere. As communication is based on HTTP or HTTPS it is also possible to access SSH servers from behind a firewall or proxy that restricts Internet access to only ports 80 (HTTP) or 443 (HTTPS).</:p>
<:p>- "Anonymous Access": As SSH access is tunneled through an intermediary web application server it is this server which actually communicates with the SSH server. This means that the SSH server will only be aware of the IP address of the web application server, keeping the actual client's IP address hidden.</:p>
<:p>- "Auditability": Because all communication between the client and the SSH server must pass through the web application server this communication can be logged. This prevents a malicious client from deleting logs of their activities. The situation is exactly the same as with traditional SSH server.</:p>
<:p>- "Resuming Sessions": Some web-based SSH implementations allow the user to resume their SSH sessions after being disconnected. This is not possible with a traditional SSH client.</:p>
<:p>- "Embeddable": Web-based SSH implementations can be embedded into any web page allowing them to be integrated into other web-based applications.</:p>
<:p>- "Unique Features": Many web-based SSH tools have unique features such as the ability to share terminals with other users, can display images within terminals, and other useful capabilities.</:p>
<:p>The following issues have to be considered and are important when using a web-based SSH client:</:p>
<:p>- "Security": It is important to make sure that HTTPS is used when communicating with the web application server. Otherwise all data being sent would be readable by use of simple packet sniffers which could reveal sensitive information.</:p>
<:p>- "Trust": The data being sent to the web application server is decrypted there. This is necessary in order to forward the issued commands to the actual SSH server. Even though the operators of web-based SSH solutions usually don't log sensitive data the data is theoretically available to them in plain form. It is unlikely that this will cause a security issue when the web application server and the SSH server are run on the same server or are controlled by the same entity.</:p>
<:p>- "Tunneling": Unlike most traditional, application based SSH clients, web-based SSH clients are unable to tunnel ("forward") traffic. For example, running an X session over a web-based SSH session is not possible. However, the lack of ability is caused by implementation issues, and not inherent in some way.</:p>
<:p>Google's "Secure Shell extension for Chrome and Chromium" pairs the JavaScript hterm terminal emulator with OpenSSH client code running on Native Client. The Secure Shell extension works with non-Google HTTP-to-SSH proxies via proxy hooks, and third-party application "nassh-relay" can use those hooks to enable the Secure Shell extension to establish an SSH connection over XMLHttpRequest or WebSocket transport.</:p>
<:p>"shellinabox" operates as a stand-alone service or in conjunction with nginx to provide HTTPS access to a login shell, and is packaged for Debian and RedHat -derived Linux distributions.</:p>
<:p>"Bastillion" is a self hosted, web-based bastion host with auditing and key management capabilities. Users connect to a centralized server over HTTPS and SSH connections are proxied through a secure WebSocket transport.</:p>
<:p>Because of intermittent network connections with a connection timeouts. "Mosh" by MIT can be a better solution It utilizes SSH at first then UDP from thereon.</:p>
<:p>FireSSH is a browser plug-in that works on Firefox ESR and Waterfox.</:p>