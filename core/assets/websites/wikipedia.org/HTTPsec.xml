<:import macros/html.xml />
<:h1>HTTPsec</:h1>
<:p>HTTPsec ("HTTP security") is an authentication scheme for the web protocol HTTP. HTTPsec provides cryptographically strong security at the application layer.</:p>
<:p>HTTPsec operates within the framework of the HTTP authentication headers. It uses RSA public keys for mutual authentication, and ephemeral Diffie–Hellman key exchange to ensure forward secrecy. The protocol provides mutual authentication and message origin authentication, via protection applied to (1) the integrity of URL, Method, and core HTTP headers, (2) the integrity of the message body, (3) message sequence, and (4) message replays. It optionally provides message body encryption. It does not provide header confidentiality (as messages would no longer be HTTP if their header fields were encrypted) or integrity protection applied to secondary headers (which may be legitimately altered by proxies).</:p>
<:p>The terms "requester" and "responder" are used in place of "client" and "server" for the two peers in the transaction. This is to acknowledge that the peers that are being authenticated do not necessarily map one-to-one to client or server devices. For example, a server may host multiple endpoints that are distinctly identified.</:p>
<:p>There are three possible types of transaction: Initialisation, Continuation, and Challenge.</:p>
<:p>Initialization transactions occur when a requester wishes to initiate a new shared-secret agreement. They are for protocol purposes only and are thus not used to carry message payloads.</:p>
<:p>- The requester sends its identifier, certificate, and an ephemeral Diffie–Hellman public value, and a random nonce.</:p>
<:p>- The responder responds with its identifier, certificate, an ephemeral Diffie–Hellman public value, and a separate random nonce encrypted in the RSA public key presented by the requester's certificate. It also signs with its RSA private key all the protocol parameters so far exchanged.</:p>
<:p>The responder is authenticated in the initialization stage, by the validating the signature against the public key presented by its certificate (authentication freshness is ensured by the requester's nonce). The requester is subsequently authenticated in the continuation stage by the use of HMAC message authentication codes (authentication freshness is ensured by the requester's ability to decrypt the responders's nonce).</:p>
<:p>The Diffie–Hellman values are used to generate an ephemeral shared secret. From this temporary secret keys are derived identically by both peers. In the initialise response, a token is also returned to reference these secret keys in subsequent continuation messages.</:p>
<:p>Example initialization request:</:p>
<:p>Example initialization response:</:p>
<:p>These transactions benefit from security protections that derive from a shared-secret agreement. They are in all other respects conventional HTTP messages. Continuation transactions can be employed if the requester has at a previous point initialised a shared-secret agreement.</:p>
<:p>- The requester and responder send a sequence of arbitrary HTTP messages, quoting the token as a reference to the secret keys employed.</:p>
<:p>- The secret keys are inputs to message authentication codes and message body encryption. As the keys are only known by the two legitimate peers, they are used by the message-receiving peer to validate the message-sending peer, and to decrypt the message body. Additionally, message uniqueness is enforced by an incrementing counter, which is one of various inputs to the message's MAC.</:p>
<:p>Example of a continuation request:</:p>
<:p>Example of a continuation response:</:p>
<:p>Note that whilst the sample Continuation request has a GET method and therefore no body, it could equally be a POST, PUT, etc. with a message body and have the same message body protection as shown in the example Continuation response.</:p>
<:p>These transactions allow a responder to attempt to initiate HTTPsec.</:p>
<:p>- The requester asks for a resource, in a conventional HTTP request.</:p>
<:p>- The responder answers with a "401 Unauthorized" response, and states its support for HTTPsec.</:p>
<:p>Example of a challenge response:</:p>
<:p>The algorithms employed by HTTPsec are RSA, OAEP, PSS, HMAC, SHA-256, and AES-256. The protocol does not allow algorithm negotiation.</:p>
<:p>- Secure Hypertext Transfer Protocol</:p>
<:p>- HTTP Strict Transport Security</:p>